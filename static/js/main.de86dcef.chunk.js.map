{"version":3,"sources":["CircularSlider.js","App.js","serviceWorker.js","index.js"],"names":["touchSupported","window","SLIDER_EVENT","DOWN","UP","MOVE","styles","StyleSheet","create","circularSlider","position","indicator","left","top","cursor","svg","width","height","drag","pause","animationPlayState","animation","animationDuration","transformOrigin","animationIterationCount","animationTimingFunction","animationName","transform","CircularSlider","useState","isDragging","radius","scale","radians","x","y","dashFullArray","dashFullOffset","state","setState","useRef","svgFullPath","offsetRelativeToDocument","useCallback","rect","current","getBoundingClientRect","scrollLeft","pageXOffset","document","documentElement","scrollTop","pageYOffset","indicatorPosition","offsetRadians","degrees","Math","PI","dashOffset","prevState","cos","sin","onMouseDown","event","preventDefault","onMouseMove","touch","type","changedTouches","mouseXFromCenter","pageX","mouseYFromCenter","pageY","atan2","onMouseUp","useEffect","sliderOffset","pathLength","getTotalLength","console","log","addEventListener","passive","removeEventListener","className","css","ref","viewBox","overflow","id","x2","y2","offset","stopColor","strokeWidth","fill","stroke","cx","cy","r","strokeDasharray","strokeDashoffset","strokeLinecap","d","style","onTouchStart","fillOpacity","App","wrapper","margin","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de86dcef.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport {StyleSheet, css} from 'aphrodite';\n\nconst touchSupported = ('ontouchstart' in window);\n\nconst SLIDER_EVENT = {\n    DOWN: touchSupported ? 'touchstart' : 'mousedown',\n    UP: touchSupported ? 'touchend' : 'mouseup',\n    MOVE: touchSupported ? 'touchmove' : 'mousemove',\n};\n\nconst CircularSlider = () => {\n    const [state, setState] = useState({\n        isDragging: false,\n        radius: 0,\n        indicator: {\n            scale: 1,\n            radians: -1,\n            x: 0,\n            y: 0,\n        },\n        dashFullArray: 0,\n        dashFullOffset: 0\n    });\n\n    let circularSlider = useRef(null);\n    let svgFullPath = useRef(null);\n\n    const offsetRelativeToDocument = useCallback(() => {\n        const rect = circularSlider.current.getBoundingClientRect();\n        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        return { top: rect.top + scrollTop, left: rect.left + scrollLeft, radius: rect.width / 2 };\n    }, []);\n\n    const indicatorPosition = useCallback((radians) => {\n        const radius = state.radius;\n        const offsetRadians = radians + 1.5708; // offset by 90 degrees\n        const degrees = (offsetRadians > 0 ? offsetRadians\n            :\n            ((2 * Math.PI) + offsetRadians)) * (360 / (2 * Math.PI));\n\n        const dashOffset = state.dashFullArray - ((degrees / 360) * state.dashFullArray);\n\n        setState(prevState => ({\n            ...prevState,\n            dashFullOffset: dashOffset,\n            indicator: {\n                scale: 1,\n                radians: radians,\n                x: (radius * Math.cos(radians) + radius),\n                y: (radius * Math.sin(radians) + radius),\n            }\n        }));\n    }, [state.dashFullArray, state.radius]);\n\n    const onMouseDown = useCallback((event) => {\n        event.preventDefault();\n\n        setState(prevState => ({\n            ...prevState,\n            isDragging: true\n        }));\n\n    }, []);\n\n    const onMouseMove = useCallback((event) => {\n        event.preventDefault();\n\n        if(!state.isDragging) return;\n\n        let touch;\n        if (event.type === 'touchmove') {\n            touch = event.changedTouches[0];\n        }\n\n        const mouseXFromCenter = (event.type === 'touchmove' ? touch.pageX : event.pageX) -\n            (offsetRelativeToDocument().left + state.radius);\n        const mouseYFromCenter = (event.type === 'touchmove' ? touch.pageY : event.pageY) -\n            (offsetRelativeToDocument().top + state.radius);\n\n        const radians = Math.atan2(mouseYFromCenter, mouseXFromCenter);\n        indicatorPosition(radians);\n    }, [state.isDragging, state.radius, indicatorPosition, offsetRelativeToDocument]);\n\n    const onMouseUp = (event) => {\n        event.preventDefault();\n\n        setState(prevState => ({\n            ...prevState,\n            isDragging: false\n        }));\n    };\n\n    useEffect(() => {\n        const sliderOffset = offsetRelativeToDocument();\n        const pathLength = svgFullPath.current.getTotalLength();\n\n        setState(prevState => ({\n            ...prevState,\n            dashFullArray: pathLength,\n            dashFullOffset: pathLength,\n            radius: sliderOffset.radius,\n            indicator: {\n                scale: 1,\n                radians: 0,\n                x: sliderOffset.radius,\n                y: 0,\n            },\n        }));\n    }, [offsetRelativeToDocument]);\n\n    useEffect( () => {\n        if(state.isDragging) {\n            console.log('dragging');\n            window.addEventListener(SLIDER_EVENT.MOVE, onMouseMove, {passive: false});\n            window.addEventListener(SLIDER_EVENT.UP, onMouseUp, {passive: false});\n            return () => {\n                window.removeEventListener(SLIDER_EVENT.MOVE, onMouseMove);\n                window.removeEventListener(SLIDER_EVENT.UP, onMouseUp);\n            }\n        }\n    }, [state.isDragging, onMouseMove]);\n\n    return (\n        <div className={css(styles.circularSlider)} ref={circularSlider}>\n            <svg width=\"390px\" height=\"390px\" viewBox=\"0 0 390 390\" overflow=\"visible\" className={css(styles.svg)}>\n                <defs>\n                    <linearGradient id=\"gradient\" x2=\"0%\" y2=\"100%\">\n                        <stop offset=\"0%\" stopColor=\"#80C3F3\"/>\n                        <stop offset=\"100%\" stopColor=\"#4990E2\"/>\n                    </linearGradient>\n                    <linearGradient id=\"gradient2\" x2=\"0%\" y2=\"100%\">\n                        <stop offset=\"0%\" stopColor=\"#4990E2\"/>\n                        <stop offset=\"100%\" stopColor=\"#80C3F3\"/>\n                    </linearGradient>\n                </defs>\n                <circle strokeWidth={4} fill=\"none\" stroke=\"#DDDEFB\" cx={195} cy={195} r={195} />\n                <path\n                    ref={svgFullPath}\n                    strokeDasharray={state.dashFullArray}\n                    strokeDashoffset={state.dashFullOffset}\n                    strokeWidth=\"4\"\n                    strokeLinecap=\"round\"\n                    fill=\"none\"\n                    stroke=\"url(#gradient)\"\n                    d=\"\n                        M 195, 195\n                        m 0, -195\n                        a 195,195 0 0,1 0,390\n                        a -195,-195 0 0,1 0,-390\n                    \"/>\n            </svg>\n            <div\n                style={{transform: `translate(${state.indicator.x}px, ${state.indicator.y}px)`}}\n                className={css(styles.indicator, state.isDragging && styles.drag, state.isDragging && styles.pause)}\n                onMouseDown={onMouseDown}\n                onTouchStart={onMouseDown}\n            >\n                <svg\n                    width=\"36px\"\n                    height=\"36px\"\n                    viewBox=\"0 0 36 36\"\n                >\n                    <circle fill=\"#5C4BEA\" fillOpacity=\"0.2\" stroke=\"none\" cx=\"18\" cy=\"18\" r=\"18\" className={css(!state.isDragging && styles.animation)} />\n                    <circle fill=\"#5C4BEA\" stroke=\"none\" cx=\"18\" cy=\"18\" r=\"12\" />\n                    <rect fill=\"#FFFFFF\" x=\"13\" y=\"14\" width=\"9\" height=\"1\" />\n                    <rect fill=\"#FFFFFF\" x=\"13\" y=\"17\" width=\"9\" height=\"1\" />\n                    <rect fill=\"#FFFFFF\" x=\"13\" y=\"20\" width=\"9\" height=\"1\" />\n                </svg>\n            </div>\n        </div>\n    );\n};\n\nconst pulse_animation = {\n    \"0%\": {transform: \"scale(1)\"},\n    \"50%\": {transform: \"scale(0.8)\"},\n    \"100%\": {transform: \"scale(1)\"}\n};\n\nconst styles = StyleSheet.create({\n    circularSlider: {\n        position: 'relative',\n    },\n\n    indicator: {\n        position: 'absolute',\n        left: '-18px',\n        top: '-18px',\n        cursor: 'grab',\n    },\n\n    svg: {\n        width: '100%',\n        height: 'auto'\n    },\n\n    drag: {\n        cursor: 'grabbing',\n    },\n\n    pause: {\n        animationPlayState: 'paused',\n    },\n\n    animation: {\n        animationDuration: '1500ms',\n        transformOrigin: '50% 50%',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'ease-out',\n        animationName: [pulse_animation]\n    }\n});\n\nexport default CircularSlider;\n","import React from 'react';\nimport {StyleSheet, css} from 'aphrodite';\nimport CircularSlider from \"./CircularSlider\";\n\nconst App = () => {\n    const styles = StyleSheet.create({\n        wrapper: {\n            margin: '2rem'\n        }\n    });\n\n    return (\n        <div className={css(styles.wrapper)}>\n            <CircularSlider />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}