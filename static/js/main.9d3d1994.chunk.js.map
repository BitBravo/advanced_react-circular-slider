{"version":3,"sources":["CircularSlider.js","App.js","serviceWorker.js","index.js"],"names":["touchSupported","window","SLIDER_EVENT","DOWN","UP","MOVE","CircularSlider","useState","isDragging","radius","indicator","scale","radians","x","y","dashFullArray","dashFullOffset","state","setState","styles","StyleSheet","create","circularSlider","position","left","top","cursor","drag","pause","animationPlayState","animation","animationDuration","transformOrigin","animationIterationCount","animationTimingFunction","animationName","transform","useRef","svgFullPath","offsetRelativeToDocument","useCallback","rect","current","getBoundingClientRect","scrollLeft","pageXOffset","document","documentElement","scrollTop","pageYOffset","indicatorPosition","offsetRadians","degrees","Math","PI","dashOffset","prevState","cos","sin","onMouseDown","event","preventDefault","onMouseMove","touch","stopPropagation","type","changedTouches","mouseXFromCenter","pageX","mouseYFromCenter","pageY","atan2","onMouseUp","useLayoutEffect","getTotalLength","useEffect","addEventListener","removeEventListener","className","css","ref","width","height","viewBox","id","x2","y2","offset","stopColor","strokeWidth","fill","stroke","cx","cy","r","strokeDasharray","strokeDashoffset","strokeLinecap","d","style","fillOpacity","App","wrapper","padding","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d3d1994.chunk.js","sourcesContent":["import React, { useState, useEffect, useLayoutEffect, useCallback, useRef } from 'react';\nimport {StyleSheet, css} from 'aphrodite';\n\nconst touchSupported = ('ontouchstart' in window);\n\nconst SLIDER_EVENT = {\n    DOWN: touchSupported ? 'touchstart' : 'mousedown',\n    UP: touchSupported ? 'touchend' : 'mouseup',\n    MOVE: touchSupported ? 'touchmove' : 'mousemove',\n};\n\nconst CircularSlider = () => {\n    const [state, setState] = useState({\n        isDragging: false,\n        radius: 193,\n        indicator: {\n            scale: 1,\n            radians: -1,\n            x: 191,\n            y: 0,\n        },\n        dashFullArray: 0,\n        dashFullOffset: 0\n    });\n\n    const pulse_animation = {\n        \"0%\": {transform: \"scale(1)\"},\n        \"50%\": {transform: \"scale(0.8)\"},\n        \"100%\": {transform: \"scale(1)\"}\n    };\n\n    const styles = StyleSheet.create({\n        circularSlider: {\n            position: 'relative',\n        },\n\n        indicator: {\n            position: 'absolute',\n            left: '-16px',\n            top: '-16px',\n            cursor: 'grab'\n        },\n\n        drag: {\n            cursor: 'grabbing'\n        },\n\n        pause: {\n            animationPlayState: 'paused',\n        },\n\n        animation: {\n            animationDuration: '1500ms',\n            transformOrigin: '50% 50%',\n            animationIterationCount: 'infinite',\n            animationTimingFunction: 'ease-out',\n            animationName: [pulse_animation]\n        }\n    });\n\n    let circularSlider = useRef(null);\n    let svgFullPath = useRef(null);\n\n    const offsetRelativeToDocument = useCallback(() => {\n        const rect = circularSlider.current.getBoundingClientRect();\n        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\n    }, []);\n\n    const indicatorPosition = useCallback((radians) => {\n        const radius = state.radius;\n        const offsetRadians = radians + 1.5708; // offset by 90 degrees\n        const degrees = (offsetRadians > 0 ? offsetRadians\n            :\n            ((2 * Math.PI) + offsetRadians)) * (360 / (2 * Math.PI));\n\n        const dashOffset = state.dashFullArray - ((degrees / 360) * state.dashFullArray);\n\n        setState(prevState => ({\n            ...prevState,\n            dashFullOffset: dashOffset,\n            indicator: {\n                scale: 1,\n                radians: radians,\n                x: (radius * Math.cos(radians) + radius),\n                y: (radius * Math.sin(radians) + radius),\n            }\n        }));\n    }, [state.dashFullArray, state.radius]);\n\n    const onMouseDown = useCallback((event) => {\n        setState(prevState => ({\n            ...prevState,\n            isDragging: true\n        }));\n        event.preventDefault();\n\n    }, []);\n\n    const onMouseMove = useCallback((event) => {\n        if(!state.isDragging) return;\n        event.stopPropagation();\n        event.preventDefault();\n\n        let touch;\n        if (event.type === 'touchmove') {\n            touch = event.changedTouches[0];\n        }\n\n        const mouseXFromCenter = (event.type === 'touchmove' ? touch.pageX : event.pageX) -\n            (offsetRelativeToDocument().left + state.radius);\n        const mouseYFromCenter = (event.type === 'touchmove' ? touch.pageY : event.pageY) -\n            (offsetRelativeToDocument().top + state.radius);\n\n        const radians = Math.atan2(mouseYFromCenter, mouseXFromCenter);\n        indicatorPosition(radians);\n    }, [state.isDragging, state.radius, indicatorPosition, offsetRelativeToDocument]);\n\n    const onMouseUp = (event) => {\n        setState(prevState => ({\n            ...prevState,\n            isDragging: false\n        }));\n    };\n\n    useLayoutEffect(() => {\n        setState(prevState => ({\n            ...prevState,\n            dashFullArray: svgFullPath.current.getTotalLength(),\n            dashFullOffset: svgFullPath.current.getTotalLength(),\n        }));\n    }, []);\n\n    useEffect( () => {\n        if(state.isDragging) {\n            document.addEventListener(SLIDER_EVENT.MOVE, onMouseMove);\n            document.addEventListener(SLIDER_EVENT.UP, onMouseUp);\n            return () => {\n                document.removeEventListener(SLIDER_EVENT.MOVE, onMouseMove);\n                document.removeEventListener(SLIDER_EVENT.UP, onMouseUp);\n            }\n        }\n    }, [state.isDragging, onMouseMove]);\n\n    return (\n        <div className={css(styles.circularSlider)} ref={circularSlider}>\n            <svg width=\"390px\" height=\"390px\" viewBox=\"0 0 390 390\">\n                <defs>\n                    <linearGradient id=\"gradient\" x2=\"0%\" y2=\"100%\">\n                        <stop offset=\"0%\" stopColor=\"#80C3F3\"/>\n                        <stop offset=\"100%\" stopColor=\"#4990E2\"/>\n                    </linearGradient>\n                    <linearGradient id=\"gradient2\" x2=\"0%\" y2=\"100%\">\n                        <stop offset=\"0%\" stopColor=\"#4990E2\"/>\n                        <stop offset=\"100%\" stopColor=\"#80C3F3\"/>\n                    </linearGradient>\n                </defs>\n                <circle strokeWidth={4} fill=\"none\" stroke=\"#DDDEFB\" cx={195} cy={195} r={state.radius} />\n                <path\n                    ref={svgFullPath}\n                    strokeDasharray={state.dashFullArray}\n                    strokeDashoffset={state.dashFullOffset}\n                    strokeWidth=\"4\"\n                    strokeLinecap=\"round\"\n                    fill=\"none\"\n                    stroke=\"url(#gradient)\"\n                    d=\"\n                        M 195, 195\n                        m 0, -193\n                        a 193,193 0 0,1 0,386\n                        a -193,-193 0 0,1 0,-386\n                    \"/>\n            </svg>\n            <div style={{transform: `translate(${state.indicator.x}px, ${state.indicator.y}px)`}} className={css(styles.indicator, styles.drag, state.isDragging && styles.pause)}>\n                <svg\n                    width=\"36px\"\n                    height=\"36px\"\n                    viewBox=\"0 0 36 36\"\n                    onMouseDown={onMouseDown}\n                >\n                    <circle fill=\"#5C4BEA\" fillOpacity=\"0.2\" stroke=\"none\" cx=\"18\" cy=\"18\" r=\"18\" className={css(!state.isDragging && styles.animation)} />\n                    <circle fill=\"#5C4BEA\" stroke=\"none\" cx=\"18\" cy=\"18\" r=\"12\" />\n                    <rect fill=\"#FFFFFF\" x=\"13\" y=\"14\" width=\"9\" height=\"1\" />\n                    <rect fill=\"#FFFFFF\" x=\"13\" y=\"17\" width=\"9\" height=\"1\" />\n                    <rect fill=\"#FFFFFF\" x=\"13\" y=\"20\" width=\"9\" height=\"1\" />\n                </svg>\n            </div>\n        </div>\n    );\n};\n\nexport default CircularSlider;\n","import React from 'react';\nimport {StyleSheet, css} from 'aphrodite';\nimport CircularSlider from \"./CircularSlider\";\n\nconst App = () => {\n    const styles = StyleSheet.create({\n        wrapper: {\n            padding: '2rem'\n        }\n    });\n\n    return (\n        <div className={css(styles.wrapper)}>\n            <CircularSlider />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}