{"version":3,"sources":["CircularSlider.js","App.js","serviceWorker.js","index.js"],"names":["touchSupported","window","SLIDER_EVENT","DOWN","UP","MOVE","CircularSlider","props","label","width","knobSize","knobRadius","knobColor","labelColor","progressColors","from","to","trackColor","progressSize","trackSize","onChange","useState","mounted","isDragging","radius","degrees","knob","radians","x","y","dashFullArray","dashFullOffset","state","setState","circularSlider","useRef","svgFullPath","offsetRelativeToDocument","useCallback","rect","current","getBoundingClientRect","scrollLeft","pageXOffset","document","documentElement","scrollTop","pageYOffset","top","left","knobPosition","offsetRadians","Math","PI","dashOffset","round","prevState","cos","sin","onMouseDown","event","onMouseMove","preventDefault","touch","type","changedTouches","mouseXFromCenter","pageX","mouseYFromCenter","pageY","atan2","onMouseUp","useEffect","sliderOffset","pathLength","getTotalLength","addEventListener","passive","removeEventListener","styles","StyleSheet","create","position","display","opacity","transition","cursor","zIndex","svg","drag","pause","animationPlayState","animation","animationDuration","transformOrigin","animationIterationCount","animationTimingFunction","animationName","transform","labels","height","flexDirection","justifyContent","alignItems","color","value","fontSize","marginBottom","description","textTransform","className","css","ref","viewBox","overflow","id","x1","x2","offset","stopColor","strokeWidth","fill","stroke","cx","cy","r","strokeDasharray","strokeDashoffset","strokeLinecap","d","style","onTouchStart","fillOpacity","App","wrapper","marginTop","textAlign","deg","console","log","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3db219ec.chunk.js","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react';\nimport {StyleSheet, css} from 'aphrodite';\n\nconst touchSupported = ('ontouchstart' in window);\n\nconst SLIDER_EVENT = {\n    DOWN: touchSupported ? 'touchstart' : 'mousedown',\n    UP: touchSupported ? 'touchend' : 'mouseup',\n    MOVE: touchSupported ? 'touchmove' : 'mousemove',\n};\n\nconst CircularSlider = (props) => {\n    const {\n        label = 'Degrees',\n        width = 280,\n        knobSize = 36,\n        knobRadius = 12,\n        knobColor = '#4e63ea',\n        labelColor = '#272b77',\n        progressColors = {from: '#80C3F3', to: '#4990E2'},\n        trackColor = '#DDDEFB',\n        progressSize = 6,\n        trackSize = 6,\n        onChange\n    } = props;\n    const [state, setState] = useState({\n        mounted: false,\n        isDragging: false,\n        width: width,\n        radius: width / 2,\n        degrees: 0,\n        knob: {\n            radians: 0,\n            x: 0,\n            y: 0,\n        },\n        dashFullArray: 0,\n        dashFullOffset: 0\n    });\n\n    let circularSlider = useRef(null);\n    let svgFullPath = useRef(null);\n\n    const offsetRelativeToDocument = useCallback(() => {\n        const rect = circularSlider.current.getBoundingClientRect();\n        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        return {top: rect.top + scrollTop, left: rect.left + scrollLeft};\n    }, []);\n\n    const knobPosition = useCallback((radians) => {\n        const radius = state.radius;\n        const offsetRadians = radians + 1.5708; // offset by 90 degrees\n        const degrees = (offsetRadians > 0 ? offsetRadians\n            :\n            ((2 * Math.PI) + offsetRadians)) * (360 / (2 * Math.PI));\n\n        const dashOffset = state.dashFullArray - ((degrees / 360) * state.dashFullArray);\n\n        // props callback for parent\n        onChange(Math.round(degrees));\n\n        setState(prevState => ({\n            ...prevState,\n            dashFullOffset: dashOffset,\n            degrees: Math.round(degrees),\n            knob: {\n                radians: radians,\n                x: (radius * Math.cos(radians) + radius),\n                y: (radius * Math.sin(radians) + radius),\n            }\n        }));\n    }, [state.dashFullArray, state.radius, onChange]);\n\n    const onMouseDown = useCallback((event) => {\n        setState(prevState => ({\n            ...prevState,\n            isDragging: true\n        }));\n\n    }, []);\n\n    const onMouseMove = useCallback((event) => {\n        event.preventDefault();\n\n        if (!state.isDragging) return;\n\n        let touch;\n        if (event.type === 'touchmove') {\n            touch = event.changedTouches[0];\n        }\n\n        const mouseXFromCenter = (event.type === 'touchmove' ? touch.pageX : event.pageX) -\n            (offsetRelativeToDocument().left + state.radius);\n        const mouseYFromCenter = (event.type === 'touchmove' ? touch.pageY : event.pageY) -\n            (offsetRelativeToDocument().top + state.radius);\n\n        const radians = Math.atan2(mouseYFromCenter, mouseXFromCenter);\n        knobPosition(radians);\n    }, [state.isDragging, state.radius, knobPosition, offsetRelativeToDocument]);\n\n    const onMouseUp = (event) => {\n        setState(prevState => ({\n            ...prevState,\n            isDragging: false\n        }));\n    };\n\n    useEffect(() => {\n        const sliderOffset = offsetRelativeToDocument();\n        const pathLength = svgFullPath.current.getTotalLength();\n\n        setState(prevState => ({\n            ...prevState,\n            mounted: true,\n            dashFullArray: pathLength,\n            dashFullOffset: pathLength,\n            radius: sliderOffset.radius,\n            knob: {\n                radians: 0,\n                x: sliderOffset.radius,\n                y: 0,\n            },\n        }));\n    }, [offsetRelativeToDocument]);\n\n    useEffect(() => {\n        if (state.isDragging) {\n            window.addEventListener(SLIDER_EVENT.MOVE, onMouseMove, {passive: false});\n            window.addEventListener(SLIDER_EVENT.UP, onMouseUp, {passive: false});\n            return () => {\n                window.removeEventListener(SLIDER_EVENT.MOVE, onMouseMove);\n                window.removeEventListener(SLIDER_EVENT.UP, onMouseUp);\n            }\n        }\n    }, [state.isDragging, onMouseMove]);\n\n    const pulse_animation = {\n        \"0%\": {transform: \"scale(1)\"},\n        \"50%\": {transform: \"scale(0.8)\"},\n        \"100%\": {transform: \"scale(1)\"}\n    };\n\n    const styles = StyleSheet.create({\n        circularSlider: {\n            position: 'relative',\n            display: 'inline-block',\n            opacity: 0,\n            transition: 'opacity 1s ease-in'\n        },\n\n        mounted: {\n            opacity: 1\n        },\n\n        knob: {\n            position: 'absolute',\n            left: `-${knobSize/2}px`,\n            top: `-${knobSize/2}px`,\n            cursor: 'grab',\n            zIndex: 3\n        },\n\n        svg: {\n            position: 'relative',\n            zIndex: 2\n        },\n\n        drag: {\n            cursor: 'grabbing',\n        },\n\n        pause: {\n            animationPlayState: 'paused',\n        },\n\n        animation: {\n            animationDuration: '1500ms',\n            transformOrigin: '50% 50%',\n            animationIterationCount: 'infinite',\n            animationTimingFunction: 'ease-out',\n            animationName: [pulse_animation]\n        },\n\n        labels: {\n            position: 'absolute',\n            top: '0',\n            left: '0',\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            color: `${labelColor}`,\n            zIndex: 1,\n        },\n\n        value: {\n            fontSize: '4rem',\n            marginBottom: '2rem'\n        },\n\n        description: {\n            fontSize: '1rem',\n            textTransform: 'uppercase'\n        }\n    });\n\n    return (\n        <div className={css(styles.circularSlider, state.mounted && styles.mounted)} ref={circularSlider}>\n            <svg\n                width={`${width}px`}\n                height={`${width}px`}\n                viewBox={`0 0 ${width} ${width}`}\n                overflow=\"visible\"\n                className={css(styles.svg)}\n            >\n                <defs>\n                    <linearGradient id=\"gradient\" x1=\"100%\" x2=\"0%\">\n                        <stop offset=\"0%\" stopColor={progressColors.from}/>\n                        <stop offset=\"100%\" stopColor={progressColors.to}/>\n                    </linearGradient>\n                </defs>\n                <circle\n                    strokeWidth={trackSize}\n                    fill=\"none\"\n                    stroke={trackColor}\n                    cx={width / 2}\n                    cy={width / 2}\n                    r={width / 2}\n                />\n                <path\n                    ref={svgFullPath}\n                    strokeDasharray={state.dashFullArray}\n                    strokeDashoffset={state.dashFullOffset}\n                    strokeWidth={progressSize}\n                    strokeLinecap=\"round\"\n                    fill=\"none\"\n                    stroke=\"url(#gradient)\"\n                    d={`\n                        M ${width / 2}, ${width / 2}\n                        m 0, -${width / 2}\n                        a ${width / 2},${width / 2} 0 0,1 0,${width}\n                        a -${width / 2},-${width / 2} 0 0,1 0,-${width}\n                    `}/>\n            </svg>\n            <div\n                style={{transform: `translate(${state.knob.x}px, ${state.knob.y}px)`}}\n                className={css(styles.knob, state.isDragging && styles.drag, state.isDragging && styles.pause)}\n                onMouseDown={onMouseDown}\n                onTouchStart={onMouseDown}\n            >\n                <svg\n                    width={`${knobSize}px`}\n                    height={`${knobSize}px`}\n                    viewBox={`0 0 ${knobSize} ${knobSize}`}\n                >\n                    <circle\n                        className={css(!state.isDragging && styles.animation)}\n                        fill={knobColor}\n                        fillOpacity=\"0.2\"\n                        stroke=\"none\"\n                        cx={knobSize / 2}\n                        cy={knobSize / 2}\n                        r={knobSize / 2}\n                    />\n                    <circle\n                        fill={knobColor}\n                        stroke=\"none\"\n                        cx={knobSize / 2}\n                        cy={knobSize / 2}\n                        r={knobRadius}\n                    />\n                    <rect fill=\"#FFFFFF\" x=\"14\" y=\"14\" width={knobSize / 4.5} height=\"1\"/>\n                    <rect fill=\"#FFFFFF\" x=\"14\" y=\"17\" width={knobSize / 4.5} height=\"1\"/>\n                    <rect fill=\"#FFFFFF\" x=\"14\" y=\"20\" width={knobSize / 4.5} height=\"1\"/>\n                </svg>\n            </div>\n            <div className={css(styles.labels)}>\n                <div className={css(styles.description)}>{label}</div>\n                <div className={css(styles.value)}><code>{state.degrees}°</code></div>\n            </div>\n        </div>\n    );\n};\n\nexport default CircularSlider;\n","import React from 'react';\nimport {StyleSheet, css} from 'aphrodite';\nimport CircularSlider from \"./CircularSlider\";\n\nconst App = () => {\n    const styles = StyleSheet.create({\n        wrapper: {\n            marginTop: '4rem',\n            textAlign: 'center'\n        }\n    });\n\n    const onChange = (deg) => {\n      console.log(deg);\n    };\n\n    return (\n        <div className={css(styles.wrapper)}>\n            <CircularSlider\n                onChange={onChange}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}